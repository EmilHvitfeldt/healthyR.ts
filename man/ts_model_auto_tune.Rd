% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ts-model-tuner.R
\name{ts_model_auto_tune}
\alias{ts_model_auto_tune}
\title{Time Series Model Tuner}
\usage{
ts_model_auto_tune(
  .modeltime_model_id,
  .calibration_tbl,
  .splits_obj,
  .drop_training_na = TRUE,
  .date_col,
  .value_col,
  .tscv_assess = "12 months",
  .tscv_skip = "6 months",
  .slice_limit = 6,
  .facet_ncol = 2,
  .grid_size = 30,
  .num_cores = 1,
  .best_metric = "rmse"
)
}
\arguments{
\item{.modeltime_model_id}{The .model_id from a calibrated modeltime table.}

\item{.calibration_tbl}{A calibrated modeltime table.}

\item{.splits_obj}{The time_series_split object.}

\item{.drop_training_na}{A boolean that will drop NA values from the training(splits)
data}

\item{.date_col}{The column that holds the date values.}

\item{.value_col}{The column that holds the time series values.}

\item{.tscv_assess}{A character expression like "12 months". This gets passed to
\code{\link[timetk:time_series_cv]{timetk::time_series_cv()}}}

\item{.tscv_skip}{A character expression like "6 months". This gets passed to
\code{\link[timetk:time_series_cv]{timetk::time_series_cv()}}}

\item{.slice_limit}{An integer that gets passed to \code{\link[timetk:time_series_cv]{timetk::time_series_cv()}}}

\item{.facet_ncol}{The number of faceted columns to be passed to plot_time_series_cv_plan}

\item{.grid_size}{An integer that gets passed to the \code{\link[dials:grid_max_entropy]{dials::grid_latin_hypercube()}}
function.}

\item{.num_cores}{The default is 1, you can set this to any integer value as long
as it is equal to or less than the available cores on your machine.}

\item{.best_metric}{The default is "rmse" and this can be set to any default dials
metric. This must be passed as a character.}
}
\value{
A list object with multiple items.
}
\description{
This function will create a tuned model. It uses the \code{\link[=ts_model_spec_tune_template]{ts_model_spec_tune_template()}}
under the hood to get the generic template that is used in the grid search.
}
\details{
This function can work with the following parsnip/modeltime engines:
\itemize{
\item "auto_arima"
\item "auto_arima_xgboost"
\item "ets"
\item "croston"
\item "theta"
\item "stlm_ets"
\item "tbats"
\item "stlm_arima"
\item "nnetar"
\item "prophet"
\item "prophet_xgboost"
\item "lm"
\item "glmnet"
\item "stan"
\item "spark"
\item "keras"
\item "earth"
\item "xgboost"
}
}
\examples{
\dontrun{
suppressPackageStartupMessages(library(modeltime))
suppressPackageStartupMessages(library(timetk))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(healthyR.data))
suppressPackageStartupMessages(library(tidymodels))

data <- healthyR_data \%>\%
    filter(ip_op_flag == "I") \%>\%
    select(visit_end_date_time) \%>\%
    rename(date_col = visit_end_date_time) \%>\%
    summarise_by_time(
        .date_var = date_col
        , .by     = "month"
        , value   = n()
    ) \%>\%
    mutate(date_col = as.Date(date_col)) \%>\%
    filter_by_time(
        .date_var     = date_col
        , .start_date = "2012"
        , .end_date   = "2019"
    )

splits <- time_series_split(
    data
    , date_col
    , assess = 12
    , skip = 3
    , cumulative = TRUE
)

recipe_base <- recipe(value ~ ., data = training(splits))

model_spec_prophet <- prophet_reg(
    seasonality_yearly = "auto",
    seasonality_weekly = "auto",
    seasonality_daily = "auto"
) \%>\%
    set_engine(engine = "prophet")

model_spec_prophet_boost <- prophet_boost(
    learn_rate = 0.1
    , trees = 10
    , seasonality_yearly = "auto"
    , seasonality_weekly = "auto"
    , seasonality_daily = "auto"
) \%>\%
    set_engine("prophet_xgboost")

wfsets <- workflow_set(
    preproc = list(recipe_base),
    models = list(
        model_spec_prophet,
        model_spec_prophet_boost
    ),
    cross = TRUE
)

wf_fits <- wfsets \%>\%
    modeltime_fit_workflowset(
        data = training(splits)
        , control = control_fit_workflowset(
            allow_par = FALSE
            , verbose = TRUE
        )
    )

models_tbl <- wf_fits \%>\%
    filter(.model != "NULL")

calibration_tbl <- models_tbl \%>\%
    modeltime_calibrate(new_data = testing(splits))

output <- ts_model_auto_tune(
    .modeltime_model_id = 1,
    .calibration_tbl = calibration_tbl,
    .splits_obj = splits,
    .drop_training_na = TRUE,
    .date_col = date_col,
    .value_col = value,
    .num_cores = 4
)
}

}
\seealso{
Other Model Tuning: 
\code{\link{ts_model_spec_tune_template}()}
}
\author{
Steven P. Sanderson II, MPH
}
\concept{Model Tuning}
